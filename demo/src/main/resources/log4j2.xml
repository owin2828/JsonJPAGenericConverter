<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
	<Properties>
        <Property name="LOG_BASEDIR">./logs</Property>
        <Property name="LOG_DATEFORMAT">yyyy-MM-dd HH:mm:ss.SSS</Property>
        <Property name="TARGET">CONSOLE</Property>
    </Properties>

    <Appenders>
        <Console name="CONSOLE" target="SYSTEM_OUT">
            <PatternLayout
                pattern="%style{%d{ISO8601}}{black} %highlight{%-5level }[%style{%t}{bright,blue}] %style{%C{1.}}{bright,yellow}: %msg%n%throwable" />
        </Console>
 
        <RollingFile name="FILE"
            fileName="${LOG_BASEDIR}/chelsea-dashboard.log"
            filePattern="${LOG_BASEDIR}/archive/chelsea-dashboard.%d{yyyy-MM-dd}.log">
            <PatternLayout>
                <pattern>%d %p %C{1.} [%t] %m%n</pattern>
            </PatternLayout>
            <Policies>
                <!-- rollover on startup, daily and when the file reaches 
                    10 MegaBytes -->
                <OnStartupTriggeringPolicy />
                <SizeBasedTriggeringPolicy
                    size="10 MB" />
                <TimeBasedTriggeringPolicy />
            </Policies>
        </RollingFile>

        <RollingFile name="DB_FILE"
            fileName="${LOG_BASEDIR}/chelsea_dash_db.log"
            filePattern="${LOG_BASEDIR}/archive/chelsea_dash_db.%d{yyyy-MM-dd}.log">
            <PatternLayout>
                <pattern>%d %p %C{1.} [%t] %m%n</pattern>
            </PatternLayout>
            <Policies>
                <!-- rollover on startup, daily and when the file reaches 
                    10 MegaBytes -->
                <OnStartupTriggeringPolicy />
                <SizeBasedTriggeringPolicy
                    size="10 MB" />
                <TimeBasedTriggeringPolicy />
            </Policies>
        </RollingFile>
    </Appenders>
 
    <Loggers>
        <!-- LOG everything at INFO level -->
        <Root level="INFO">
            <AppenderRef ref="${TARGET}" />
        </Root>

        <!-- 3rdparty Loggers -->
        <logger name="org.apache.curator" level="DEBUG" additivity="false">
            <appender-ref ref="${TARGET}" />
        </logger>
        <logger name="org.apache.ibatis.io" level="INFO" additivity="false">
            <appender-ref ref="${TARGET}" />
        </logger>
        <logger name="org.apache.http" level="DEBUG" additivity="false">
            <appender-ref ref="${TARGET}" />
        </logger>
        <logger name="org.apache.zookeeper" level="WARN" additivity="false">
            <appender-ref ref="${TARGET}" />
        </logger>
        <logger name="org.mybatis.spring" level="INFO" additivity="false">
            <appender-ref ref="${TARGET}" />
        </logger>
        <logger name="org.springframework" level="INFO" additivity="false">
            <appender-ref ref="${TARGET}" />
        </logger>
        <logger name="org.springframework.jdbc" level="INFO" additivity="false">
            <appender-ref ref="${TARGET}" />
        </logger>
        <logger name="org.springframework.transaction" level="INFO" additivity="false">
            <appender-ref ref="${TARGET}" />
        </logger>

        <!-- HikariCP DB Pool Stats -->
        <logger name="com.zaxxer.hikari.pool.HikariPool.logPoolState" level="DEBUG" additivity="false">
            <appender-ref ref="DB_FILE" />
        </logger>

        <!-- SQL Log. -->
        <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 
        많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 비권장 -->
        <logger name="jdbc.audit" level="OFF" additivity="false">
            <appender-ref ref="DB_FILE" />
        </logger>

        <logger name="jdbc.connection" level="OFF" additivity="false">
            <appender-ref ref="DB_FILE" />
        </logger>

        <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성  -->
        <logger name="jdbc.resultset" level="OFF" additivity="false">
            <appender-ref ref="DB_FILE" />
        </logger>

        <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함 -->
        <logger name="jdbc.sqltiming" level="OFF" additivity="false">
            <appender-ref ref="DB_FILE" />
        </logger>

        <!-- SQL 결과 조회된 데이터의 table을 로그로 남김 -->
        <logger name="jdbc.resultsettable" level="OFF" additivity="false">
            <appender-ref ref="DB_FILE" />
        </logger>

        <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보임  -->
        <logger name="jdbc.sqlonly" level="OFF" additivity="false">
            <appender-ref ref="DB_FILE" />
        </logger>
        
    </Loggers>
 
</Configuration>